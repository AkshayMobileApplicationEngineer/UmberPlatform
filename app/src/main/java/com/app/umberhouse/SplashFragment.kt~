package com.app.umberhouse

import android.content.Context
import android.content.Intent
import android.net.ConnectivityManager
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.provider.Settings
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.content.ContextCompat
import androidx.core.app.ActivityCompat
import androidx.fragment.app.Fragment
import androidx.appcompat.app.AlertDialog
import android.Manifest
import android.util.Log

class SplashFragment : Fragment() {

    // Permission request code
    private val PERMISSIONS_REQUEST_CODE = 100
    private val BASE_TAG = "SplashFragment"  // Base tag for general use

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        val view = inflater.inflate(R.layout.fragment_splash, container, false)

        Log.e("$BASE_TAG.onCreateView", "Fragment created, inflating layout")

        // Ensure fragment is attached to the activity before manipulating the window colors
        activity?.let {
            Log.e("$BASE_TAG.onCreateView", "Setting status bar and navigation bar color")
            it.window.statusBarColor = ContextCompat.getColor(requireContext(), R.color.federal_blue)
            it.window.navigationBarColor = ContextCompat.getColor(requireContext(), R.color.federal_blue)
        }

        // Check if internet is connected, if not show a dialog
        if (!isNetworkConnected()) {
            Log.e("$BASE_TAG.NetworkCheck", "No internet connection detected")
            showNoInternetDialog()
        } else {
            Log.e("$BASE_TAG.NetworkCheck", "Internet connected, proceeding")
            // Post a delayed task, ensuring the fragment is still attached
            view.postDelayed({
                Log.e("$BASE_TAG.Delay", "Delayed task executed")
                // Check if fragment is still attached before starting activity
                if (isAdded) {
                    checkPermissionsAndProceed()
                }
            }, 1000)
        }

        return view
    }

    // Function to check if internet is connected
    private fun isNetworkConnected(): Boolean {
        Log.e("$BASE_TAG.isNetworkConnected", "Checking network connectivity")
        val connectivityManager = requireContext().getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
        val activeNetwork = connectivityManager.activeNetworkInfo
        val isConnected = activeNetwork != null && activeNetwork.isConnected
        Log.e("$BASE_TAG.isNetworkConnected", "Network connected = $isConnected")
        return isConnected
    }

    // Show dialog when no internet connection
    private fun showNoInternetDialog() {
        Log.e("$BASE_TAG.showNoInternetDialog", "No internet dialog shown")
        AlertDialog.Builder(requireContext())
            .setTitle("No Internet Connection")
            .setMessage("Please check your internet connection and try again.")
            .setCancelable(false)
            .setPositiveButton("Retry") { _, _ ->
                Log.e("$BASE_TAG.showNoInternetDialog", "Retry clicked, checking network again")
                if (isNetworkConnected()) {
                    // If internet is connected, proceed
                    checkPermissionsAndProceed()
                } else {
                    // Show error message
                    Toast.makeText(requireContext(), "No internet connection", Toast.LENGTH_SHORT).show()
                    showNoInternetDialog()  // Keep showing the dialog until connected
                }
            }
            .setNegativeButton("Exit") { _, _ ->
                Log.e("$BASE_TAG.showNoInternetDialog", "Exit clicked, finishing the activity")
                requireActivity().finish() // Close the app if the user chooses to exit
            }
            .show()
    }

    // Function to request permissions and proceed to HomeActivity
    private fun checkPermissionsAndProceed() {
        Log.e("$BASE_TAG.checkPermissions", "Checking permissions")

        // Request necessary permissions
        val permissions = arrayOf(
            Manifest.permission.ACCESS_FINE_LOCATION,
            Manifest.permission.WRITE_EXTERNAL_STORAGE,
            Manifest.permission.READ_EXTERNAL_STORAGE,
            Manifest.permission.ACCESS_COARSE_LOCATION,
            Manifest.permission.SET_ALARM,
            Manifest.permission.POST_NOTIFICATIONS
        )

        // Check if all permissions are granted
        val permissionsNotGranted = permissions.filter {
            ActivityCompat.checkSelfPermission(requireContext(), it) != android.content.pm.PackageManager.PERMISSION_GRANTED
        }

        if (permissionsNotGranted.isNotEmpty()) {
            Log.e("$BASE_TAG.checkPermissions", "Permissions not granted, requesting permissions")
            // Request permissions
            ActivityCompat.requestPermissions(requireActivity(), permissionsNotGranted.toTypedArray(), PERMISSIONS_REQUEST_CODE)
        } else {
            Log.e("$BASE_TAG.checkPermissions", "All permissions granted, proceeding to HomeActivity")
            // All permissions granted, proceed
            navigateToHomeActivity()
        }
    }

    // Handle the permissions request result
    @Deprecated("Deprecated in Java")
    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)

        if (requestCode == PERMISSIONS_REQUEST_CODE) {
            Log.e("$BASE_TAG.onRequestPermissionsResult", "Handling permissions result")
            // If all permissions were granted, proceed
            if (grantResults.all { it == android.content.pm.PackageManager.PERMISSION_GRANTED }) {
                Log.e("$BASE_TAG.onRequestPermissionsResult", "Permissions granted, proceeding to HomeActivity")
                navigateToHomeActivity()
            } else {
                // Handle permission denial, show a message
                Log.e("$BASE_TAG.onRequestPermissionsResult", "Some permissions denied")
                Toast.makeText(requireContext(), "Permissions denied, some features may not work.", Toast.LENGTH_LONG).show()
                // Optionally, show a dialog asking the user to allow permissions
            }
        }
    }

    // Navigate to HomeActivity after permissions are granted
    private fun navigateToHomeActivity() {
        Log.e("$BASE_TAG.navigateToHomeActivity", "Navigating to HomeActivity")
        startActivity(Intent(requireActivity(), HomeActivity::class.java))
        requireActivity().finish()  // Optionally finish the current activity
    }
}
